// <auto-generated />
using System;
using JobBoardAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobBoardAPI.Migrations
{
    [DbContext(typeof(JobOffertsDbContext))]
    [Migration("20240224213819_CreatedByUserSeekerAdded")]
    partial class CreatedByUserSeekerAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobBoardAPI.Entities.JobOffert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobTime")
                        .HasColumnType("int");

                    b.Property<int>("JobType")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("JobOfferts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "TrustFormulaIt",
                            Description = "Job offer for C# developer with minimum 3 years experience and graduated",
                            JobTime = 1,
                            JobType = 1,
                            Location = "Warsaw",
                            Salary = 2500.0,
                            Title = "Software developer"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "TechCo",
                            Description = "Exciting opportunity for a skilled frontend developer",
                            JobTime = 0,
                            JobType = 2,
                            Location = "New York",
                            Salary = 5000.0,
                            Title = "Frontend Developer"
                        },
                        new
                        {
                            Id = 3,
                            CompanyName = "CodeNerds",
                            Description = "Join our team as a backend developer and work on cutting-edge projects",
                            JobTime = 0,
                            JobType = 1,
                            Location = "San Francisco",
                            Salary = 6000.0,
                            Title = "Backend Developer"
                        });
                });

            modelBuilder.Entity("JobBoardAPI.Entities.Requirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("JobOffertId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobOffertId")
                        .IsUnique();

                    b.ToTable("Requirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            Education = 0,
                            Experience = 3,
                            JobOffertId = 1
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            Education = 2,
                            Experience = 3,
                            JobOffertId = 2
                        },
                        new
                        {
                            Id = 3,
                            Age = 19,
                            Education = 1,
                            Experience = 5,
                            JobOffertId = 3
                        });
                });

            modelBuilder.Entity("JobBoardAPI.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("JobBoardAPI.Entities.Seeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Seekers");
                });

            modelBuilder.Entity("JobBoardAPI.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JobOffertSeeker", b =>
                {
                    b.Property<int>("JobOffertsId")
                        .HasColumnType("int");

                    b.Property<int>("SeekersId")
                        .HasColumnType("int");

                    b.HasKey("JobOffertsId", "SeekersId");

                    b.HasIndex("SeekersId");

                    b.ToTable("OffertsSeekers", (string)null);
                });

            modelBuilder.Entity("JobBoardAPI.Entities.JobOffert", b =>
                {
                    b.HasOne("JobBoardAPI.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JobBoardAPI.Entities.Requirement", b =>
                {
                    b.HasOne("JobBoardAPI.Entities.JobOffert", null)
                        .WithOne("Requirement")
                        .HasForeignKey("JobBoardAPI.Entities.Requirement", "JobOffertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardAPI.Entities.Seeker", b =>
                {
                    b.HasOne("JobBoardAPI.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JobBoardAPI.Entities.User", b =>
                {
                    b.HasOne("JobBoardAPI.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("JobOffertSeeker", b =>
                {
                    b.HasOne("JobBoardAPI.Entities.JobOffert", null)
                        .WithMany()
                        .HasForeignKey("JobOffertsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobBoardAPI.Entities.Seeker", null)
                        .WithMany()
                        .HasForeignKey("SeekersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobBoardAPI.Entities.JobOffert", b =>
                {
                    b.Navigation("Requirement")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
